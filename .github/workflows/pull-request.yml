name: Pull Request CI

on:
  pull_request:
    # branches: [main]
    # types: [opened, synchronize, reopened]

jobs:
  validate:
    name: Validate PR
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: tlp_systems_test
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: Cache Backend Dependencies
        uses: actions/cache@v3
        with:
          path: backend/node_modules
          key: ${{ runner.os }}-backend-${{ hashFiles('backend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-backend-

      - name: Cache Frontend Dependencies
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-frontend-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-frontend-

      - name: Install Backend Dependencies
        working-directory: ./backend
        run: npm ci

      - name: Install Frontend Dependencies
        working-directory: ./frontend
        run: npm ci


      - name: Setup Test Environment
        working-directory: ./backend
        run: |
          cp .env.example .env.test
          npm run prisma generate
          npm run test:setup

      - name: Run Backend Linting
        working-directory: ./backend
        run: |
          npm run lint
          npm run format:check

      - name: Run Frontend Linting
        working-directory: ./frontend
        run: |
          npm run lint
          npm run format:check

      - name: Run Backend Tests
        working-directory: ./backend
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/tlp_systems_test
          JWT_SECRET: test-jwt-secret
          PORT: 3002
          LOG_LEVEL: error
        run: |
          npm run test:coverage
          npm run check:coverage

      - name: Run Frontend Tests
        working-directory: ./frontend
        env:
          NODE_ENV: test
        run: |
          npm run test:coverage
          npm run check:coverage

      - name: Upload Backend Coverage
        uses: actions/upload-artifact@v3
        with:
          name: backend-coverage
          path: backend/coverage

      - name: Upload Frontend Coverage
        uses: actions/upload-artifact@v3
        with:
          name: frontend-coverage
          path: frontend/coverage

      - name: Build Frontend
        working-directory: ./frontend
        env:
          NODE_ENV: production
        run: npm run build

      - name: Build Backend
        working-directory: ./backend
        env:
          NODE_ENV: production
        run: npm run build

      - name: Check for TypeScript Errors
        run: |
          cd backend && npm run typecheck
          cd ../frontend && npm run typecheck

      - name: Check for Security Vulnerabilities
        run: |
          cd backend && npm audit
          cd ../frontend && npm audit
