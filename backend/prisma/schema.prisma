generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  firstName     String
  lastName      String
  phoneNumber   String?
  role          Role      @default(EMPLOYEE)
  department    String
  status        UserStatus    @default(ACTIVE)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  leaves        Leave[]
  locumShifts   LocumShift[]
  incidents     Incident[]
  operations    OperationRequest[]
  approvals     Approval[] // Approvals given by this user
  notifications Notification[]
  auditLogs     AuditLog[]
}

// Role Enum
enum Role {
  ADMIN
  EMPLOYEE
  FINANCE
  HR
  SUPERVISOR
}

// User Status 
enum UserStatus {
  ACTIVE
  INACTIVE
}

// Leave Management
model Leave {
  id                String      @id @default(cuid())
  userId            String
  startDate         DateTime
  endDate           DateTime
  type              LeaveType
  reason            String
  additionalNotes   String?
  status            Status      @default(PENDING)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  // Relations
  user              User        @relation(fields: [userId], references: [id])
  approvals         Approval[]
}

enum LeaveType {
  ANNUAL
  SICK
  MATERNITY
  PATERNITY
  UNPAID
}

// Locum Management
model LocumShift {
  id                String      @id @default(cuid())
  userId            String
  date              DateTime
  hours             Float
  rate              Float
  status            Status      @default(PENDING)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  // Relations
  user              User        @relation(fields: [userId], references: [id])
  invoice           Invoice?
  approvals         Approval[]
}

model Invoice {
  id                String      @id @default(cuid())
  locumShiftId      String      @unique
  amount            Float
  status            Status      @default(PENDING)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  // Relations
  locumShift        LocumShift  @relation(fields: [locumShiftId], references: [id])
}

// Incident Reports
model Incident {
  id                String         @id @default(cuid())
  userId            String
  title             String
  description       String
  severity          Severity      @default(MEDIUM)
  status            Status        @default(PENDING)
  reportedAt        DateTime      @default(now())
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relations
  user              User           @relation(fields: [userId], references: [id])
  approvals         Approval[]
}

enum Severity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

// Operation Requests
model OperationRequest {
  id                String        @id @default(cuid())
  userId            String
  requestType       String
  description       String
  priority          Priority      @default(MEDIUM)
  status            Status        @default(PENDING)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relations
  user              User          @relation(fields: [userId], references: [id])
  approvals         Approval[]
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// Approval System
model Approval {
  id                String          @id @default(cuid())
  approverId        String
  status            Status          @default(PENDING)
  comments          String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  // Relations
  approver          User            @relation(fields: [approverId], references: [id])
  leave             Leave?          @relation(fields: [leaveId], references: [id])
  locumShift        LocumShift?    @relation(fields: [locumShiftId], references: [id])
  incident          Incident?       @relation(fields: [incidentId], references: [id])
  operation         OperationRequest? @relation(fields: [operationId], references: [id])

  // Optional relation fields
  leaveId           String?
  locumShiftId      String?
  incidentId        String?
  operationId       String?
}

enum Status {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
  CANCELLED
}

// Notification System
model Notification {
  id                String   @id @default(cuid())
  userId            String
  message           String
  read              Boolean  @default(false)
  createdAt         DateTime @default(now())
  user              User     @relation(fields: [userId], references: [id])
}

// Audit Log System
model AuditLog {
  id                String   @id @default(cuid())
  userId            String
  action            String
  timestamp         DateTime @default(now())
  user              User     @relation(fields: [userId], references: [id])
}

// Incident Status Enum
enum IncidentStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

// Request Status Enum
enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

// Approval Decision Enum
enum ApprovalDecision {
  APPROVED
  REJECTED
  PENDING
}
