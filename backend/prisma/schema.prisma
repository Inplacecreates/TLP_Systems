// schema.prisma

// Define database source and client generator

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Enums for business logic categories
enum LeaveType {
  ANNUAL
  SICK
  COMPASSIONATE
  MATERNITY
  PATERNITY
  UNPAID
}

enum IncidentCategory {
  SECURITY
  HEALTH
  HR
  IT
  OTHER
}

enum IncidentStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum ExpenseType {
  CAPEX
  OPEX
  TRAVEL
  SUPPLIES
}

// User model representing system users
model User {
  id          String     @id @default(uuid()) // Unique identifier
  name        String
  email       String     @unique
  contact     String?    // Added: User's contact info (phone, etc.)
  role        Role       @relation(fields: [roleId], references: [id]) // Linked role
  roleId      String
  createdAt   DateTime   @default(now())  // Creation timestamp
  updatedAt   DateTime   @updatedAt // Last update timestamp
  Leave       Leave[]    // One-to-many relation to Leave
  Incident    Incident[] // One-to-many relation to Incident
  Expense     Expense[]  // One-to-many relation to Expense
  AuditLog    AuditLog[] // One-to-many relation to Audit logs

  @@index([roleId]) // Index for faster role-based queries
  @@index([email])  // Redundant with @unique, but explicit for clarity
}

// Leave model to capture employee leave records
model Leave {
  id            String     @id @default(uuid())
  user          User       @relation(fields: [userId], references: [id])
  userId        String
  type          LeaveType  // Type of leave
  startDate     DateTime
  endDate       DateTime
  status        String     // Approval status
  statusHistory Json?      // Tracks status changes over time (event based tracking or history)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@index([userId])
  @@index([status])
  @@index([startDate, endDate])
}

// Incident model for reporting and tracking operational incidents
model Incident {
  id            String           @id @default(uuid())
  reporter      User             @relation(fields: [reporterId], references: [id])
  reporterId    String
  category      IncidentCategory // Categorization of incident
  description   String
  status        String           // Current status
  resolvedAt    DateTime?        // Timestamp for resolution
  statusHistory Json?            // Historical status tracking
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  @@index([reporterId])
  @@index([category])
  @@index([status])
}

// Expense model to track different types of expenditures
model Expense {
  id          String     @id @default(uuid())
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  type        ExpenseType // Nature of expense
  amount      Float        // Monetary value
  date        DateTime     // When expense occurred
  budgetId    String?      // Linked budget (if any)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([userId])
  @@index([type])
  @@index([date])
}

// AuditLog model for system action tracking and traceability
model AuditLog {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  action      String   // Description of action taken
  metadata    Json?    // Optional extra info (e.g. IP, context)
  createdAt   DateTime @default(now())

  @@index([userId])
  @@index([createdAt])
}

// Role model to control permissions and access rights
model Role {
  id          String     @id @default(uuid())
  name        String     @unique
  permissions Json       // JSON blob of access rules
  users       User[]     // Users under this role
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([name])
}
