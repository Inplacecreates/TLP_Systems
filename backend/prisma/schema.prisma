// schema.prisma

// Define database source and client generator

generator client {
  provider = "prisma-client-js"
}

// Define the database connection
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =====================
// ENUMS (ordered first)
// =====================

enum Role {
  ADMIN
  MANAGER
  EMPLOYEE
  FINANCE
  HR
}

enum LeaveType {
  ANNUAL
  SICK
  COMPASSIONATE
  MATERNITY
  PATERNITY
  UNPAID
}

enum Status {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
  CANCELLED
}

// Incident Status Enum
enum IncidentStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum Severity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

// =====================
// MODELS (ordered after enums)
// =====================

// User Management
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  firstName     String
  lastName      String
  role          Role      @default(EMPLOYEE)
  department    String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  leaves        Leave[]
  locumShifts   LocumShift[]
  incidents     Incident[]
  operations    OperationRequest[]
  approvals     Approval[]
}

// Leave Management
model Leave {
  id          String      @id @default(cuid())
  userId      String
  startDate   DateTime
  endDate     DateTime
  type        LeaveType
  status      Status      @default(PENDING)
  reason      String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  user        User        @relation(fields: [userId], references: [id])
  approvals   Approval[]
}

// Locum Management
model LocumShift {
  id          String      @id @default(cuid())
  userId      String
  date        DateTime
  hours       Float
  rate        Float
  status      Status      @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  user        User        @relation(fields: [userId], references: [id])
  invoice     Invoice?
  approvals   Approval[]
}

model Invoice {
  id            String      @id @default(cuid())
  locumShiftId  String      @unique
  amount        Float
  status        Status      @default(PENDING)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  locumShift    LocumShift  @relation(fields: [locumShiftId], references: [id])
}

// Finance Records
model FinanceRecord {
  id          String      @id @default(cuid())
  type        String
  amount      Float
  category    String
  description String
  date        DateTime
  status      Status      @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  approvals   Approval[]
}

// Operation Requests
model OperationRequest {
  id          String      @id @default(cuid())
  userId      String
  type        String
  description String
  priority    Priority    @default(MEDIUM)
  status      Status      @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  user        User        @relation(fields: [userId], references: [id])
  approvals   Approval[]
}

// Incident Reports
model Incident {
  id          String      @id @default(cuid())
  userId      String
  title       String
  description String
  severity    Severity    @default(MEDIUM)
  status      Status      @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  user        User        @relation(fields: [userId], references: [id])
  approvals   Approval[]
}

// Approval System
model Approval {
  id            String          @id @default(cuid())
  approverId    String
  status        Status          @default(PENDING)
  comments      String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  // Relations
  approver      User            @relation(fields: [approverId], references: [id])
  leave         Leave?          @relation(fields: [leaveId], references: [id])
  locumShift    LocumShift?    @relation(fields: [locumShiftId], references: [id])
  incident      Incident?       @relation(fields: [incidentId], references: [id])
  operation     OperationRequest? @relation(fields: [operationId], references: [id])
  finance       FinanceRecord?  @relation(fields: [financeId], references: [id])

  // Optional relation fields
  leaveId       String?
  locumShiftId  String?
  incidentId    String?
  operationId   String?
  financeId     String?
}
